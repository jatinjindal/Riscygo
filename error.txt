17c17,18
< cur_symtab, cur_offset,cur_activation = [], [],[]
---
> cur_symtab, cur_offset, cur_activation = [], [], []
> func_offset = []
23c24
< addr_3ac_offset = {}
---
> # addr_3ac_offset = {}
169c170
< def address_generate_compilername(offset,type1,width):
---
> def address_generate_compilername(offset, type1, width, offset1):
173c174
<     cur_activation[-1].data[name]={"offset":offset,"type":type1,"width":width}
---
>     cur_activation[-1].data[name] = {'offset': offset, 'type': type1, 'width': width, 'func_offset': offset1}
177c178
< def const_generate_compilername(offset,type1,width):
---
> def const_generate_compilername(offset, type1, width, offset1):
181c182
<     cur_activation[-1].data[name]={"offset":offset,"type":type1,"width":width}
---
>     cur_activation[-1].data[name] = {'offset': offset,'type': type1, 'width': width, 'func_offset': offset1}
596,597c597,598
<     for i in addr_3ac_offset:
<         out_st.write(i + ',' + str(addr_3ac_offset[i][1]) + ',' + str(addr_3ac_offset[i][2]) + '\n')
---
>     # for i in addr_3ac_offset:
>     #     out_st.write(i + ',' + str(addr_3ac_offset[i][1]) + ',' + str(addr_3ac_offset[i][2]) + '\n')
616a618
>     func_offset.append(0)
802,803c804
<                 tmp_name = address_generate_compilername(cur_offset[-1],p[2].children[0].leaf["type"],p[2].children[0].leaf['width'])
< 
---
>                 tmp_name = address_generate_compilername(cur_offset[-1], p[2].children[0].leaf["type"], p[2].children[0].leaf['width'], func_offset[-1])
811,812c812,813
<                 cur_offset[len(cur_offset) -
<                            1] += p[2].children[0].leaf["width"]
---
>                 cur_offset[-1] += p[2].children[0].leaf["width"]
>                 func_offset[-1] += p[2].children[0].leaf["width"]
832c833
<             if t is None:              
---
>             if t is None:
862,865c863
< 
<                 
< 
<                 tmp_name = address_generate_compilername( cur_offset[-1],p[2].children[0].leaf["type"],width)
---
>                 tmp_name = address_generate_compilername(cur_offset[-1], p[2].children[0].leaf["type"], width, func_offset[-1])
869a868
>                     func_offset=func_offset[-1],
871a871
>                 func_offset[-1] += width
959,962c959,960
<                 tmp_name = address_generate_compilername(cur_offset[-1],p[2].children[0].leaf["type"],p[2].children[0].leaf["width"])
< 
<                 cur_symtab[len(cur_symtab) -
<                            1].data[child.leaf["label"]] = values(
---
>                 tmp_name = address_generate_compilername(cur_offset[-1], p[2].children[0].leaf["type"], p[2].children[0].leaf["width"], func_offset[-1])
>                 cur_symtab[-1].data[child.leaf["label"]] = values(
965c963
<                                offset=cur_offset[len(cur_offset) - 1],
---
>                                offset=cur_offset[-1],
969,970c967,968
<                 cur_offset[len(cur_offset) -
<                            1] += p[2].children[0].leaf["width"]
---
>                 cur_offset[-1] += p[2].children[0].leaf["width"]
>                 func_offset[-1] += p[2].children[0].leaf["width"]
1018c1016
<                 tmp_name = address_generate_compilername(cur_offset[-1],p[2].children[0].leaf["type"],width)
---
>                 tmp_name = address_generate_compilername(cur_offset[-1], p[2].children[0].leaf["type"], width, func_offset[-1])
1024a1023
>                 func_offset[-1] += width
1044c1043
<     
---
> 
1057a1057
>     func_offset.pop()
1085a1086
>         func_offset[-2] += p[0].children[3].leaf["width"]
1102a1104
>     func_offset.append(0)
1202c1204
<             t_name = address_generate_compilername(cur_offset[-1],p[2].children[0].leaf["type"])
---
>             t_name = address_generate_compilername(cur_offset[-1], p[2].children[0].leaf["type"], p[2].children[0].leaf['width'], func_offset[-1])
1206c1208
<                 offset=cur_offset[len(cur_offset) - 1],
---
>                 offset=cur_offset[-1],
1208c1210
<             addr_3ac_offset[t_name].append(0)
---
>             # addr_3ac_offset[t_name].append(0)
1349c1351
<         print "Mismatch in number of arguments at lineno " + str(p.lineno(1))
---
>         print 'Mismatch in number of arguments at lineno ' + str(p.lineno(1))
1352,1354c1354,1355
<         if "marked" not in p[1].children[ind].children[0].leaf:
<             print "Assignment allowed only to Identifiers.Error at lineno " + str(
<                 p.lineno(1))
---
>         if 'marked' not in p[1].children[ind].children[0].leaf:
>             print 'Assignment allowed only to identifiers. Error at lineno ' + str(p.lineno(1))
1357,1362c1358,1361
<     if p[2] == "=":
<         p[0] = Node("void",
<                     [p[1], Node("void", [], {"label": p[2]}), p[4]],
<                     {"label": "Assignment"})
<         p[0].leaf["code"] = []
<         p[0].leaf["place"] = None
---
>     if p[2] == '=':
>         p[0] = Node('void', [p[1], Node('void', [], {'label': p[2]}), p[4]], {'label': 'Assignment'})
>         p[0].leaf['code'] = []
>         p[0].leaf['place'] = None
1364,1367c1363,1364
<             type1 = first_nontypedef(p[1].children[ind].leaf["type"],
<                                      cur_symtab[-1])
<             type2 = first_nontypedef(p[4].children[ind].leaf["type"],
<                                      cur_symtab[-1])
---
>             type1 = first_nontypedef(p[1].children[ind].leaf['type'], cur_symtab[-1])
>             type2 = first_nontypedef(p[4].children[ind].leaf['type'], cur_symtab[-1])
1370,1371c1367
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Arithmetic operation not allowed for given type')
---
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1373,1376c1369,1370
<                 elif (type1[0] >= 3 and type1[0] <= 12) and (type2[0] >= 13 and
<                                                              type2[0] <= 14):
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Not possible to assign float to int')
---
>                 elif type1[0] >= 3 and type1[0] <= 12 and type2[0] >= 13 and type2[0] <= 14:
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1378,1381c1372,1373
<                 elif not ((type1[0] >= 3 and type1[0] <= 14) and
<                           (type2[0] >= 3 and type2[0] <= 14)):
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Arithmetic operation not allowed for given type')
---
>                 elif not (type1[0] >= 3 and type1[0] <= 14 and type2[0] >= 3 and type2[0] <= 14):
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1383d1374
< 
1385c1376
<             if type1[0]>12 and type1[0]<=14 and type2[0]<=12:
---
>             if type1[0] > 12 and type1[0] <= 14 and type2[0] <= 12:
1388,1393c1379,1382
< 
<             p[0].leaf["code"] += (p[1].children[ind].leaf["code"] +
<                                   p[4].children[ind].leaf["code"] + [[
<                                       "=", p[1].children[ind].leaf["place"],
<                                       p[4].children[ind].leaf["place"]
<                                   ]])
---
>             p[0].leaf['code'] += p[1].children[ind].leaf['code'] + p[4].children[ind].leaf['code'] + [[
>                     '=',
>                     p[1].children[ind].leaf['place'],
>                     p[4].children[ind].leaf['place']]]
1395,1403c1384,1387
< 
<         p[0] = Node("void", [p[1], p[2].children[0], p[4]],
<                     {"label": "AssignOp"})
<         p[0].leaf["code"] = []
<         p[0].leaf["place"] = None
< 
<         if p[2].children[0].leaf["label"] in [
<                 "&=", "^=", "|=", ">>=", "<<=", "%="
<         ]:
---
>         p[0] = Node('void', [p[1], p[2].children[0], p[4]], {'label': 'AssignOp'})
>         p[0].leaf['code'] = []
>         p[0].leaf['place'] = None
>         if p[2].children[0].leaf['label'] in ['&=', '^=', '|=', '>>=', '<<=', '%=']:
1405,1409c1389,1390
<                 type1 = first_nontypedef(p[1].children[ind].leaf["type"],
<                                          cur_symtab[-1])
<                 type2 = first_nontypedef(p[4].children[ind].leaf["type"],
<                                          cur_symtab[-1])
< 
---
>                 type1 = first_nontypedef(p[1].children[ind].leaf['type'], cur_symtab[-1])
>                 type2 = first_nontypedef(p[4].children[ind].leaf['type'], cur_symtab[-1])
1411,1412c1392
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Arithmetic operation not allowed for given type')
---
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1414,1417c1394,1395
<                 if not ((type1[0] >= 3 and type1[0] <= 12) and
<                         (type2[0] >= 3 and type2[0] <= 12)):
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Arithmetic operation not allowed for given type')
---
>                 if not (type1[0] >= 3 and type1[0] <= 12 and type2[0] >= 3 and type2[0] <= 12):
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1419,1428c1397,1403
<                 p[0].leaf["code"] += (p[1].children[ind].leaf["code"] +
<                                       p[4].children[ind].leaf["code"] + [[
<                                           p[2].children[0].leaf["label"][0],
<                                           p[1].children[ind].leaf["place"],
<                                           p[1].children[ind].leaf["place"],
<                                           p[4].children[ind].leaf["place"]
<                                       ]])
<                 p[0].leaf["place"] = None
<         elif p[2].children[0].leaf["label"] in ["/=", "*=", "-="]:
< 
---
>                 p[0].leaf['code'] += p[1].children[ind].leaf['code'] + p[4].children[ind].leaf['code'] + [[
>                         p[2].children[0].leaf['label'][0],
>                         p[1].children[ind].leaf['place'],
>                         p[1].children[ind].leaf['place'],
>                         p[4].children[ind].leaf['place']]]
>                 p[0].leaf['place'] = None
>         elif p[2].children[0].leaf['label'] in ['/=', '*=', '-=']:
1430,1434c1405,1406
<                 type1 = first_nontypedef(p[1].children[ind].leaf["type"],
<                                          cur_symtab[-1])
<                 type2 = first_nontypedef(p[4].children[ind].leaf["type"],
<                                          cur_symtab[-1])
< 
---
>                 type1 = first_nontypedef(p[1].children[ind].leaf['type'], cur_symtab[-1])
>                 type2 = first_nontypedef(p[4].children[ind].leaf['type'], cur_symtab[-1])
1436,1437c1408
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Arithmetic operation not allowed for given type')
---
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1439,1442c1410,1411
<                 elif (type1[0] >= 3 and type1[0] <= 12) and (type2[0] >= 13 and
<                                                              type2[0] <= 14):
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Not possible to assign float to int')
---
>                 elif type1[0] >= 3 and type1[0] <= 12 and type2[0] >= 13 and type2[0] <= 14:
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1444,1447c1413,1414
<                 elif not ((type1[0] >= 3 and type1[0] <= 14) and
<                           (type2[0] >= 3 and type2[0] <= 14)):
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Arithmetic operation not allowed for given type')
---
>                 elif not (type1[0] >= 3 and type1[0] <= 14 and type2[0] >= 3 and type2[0] <= 14):
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1449d1415
< 
1452,1454c1418,1419
<                 
<                 operator = ""
<                 if type1[0]>12 and type1[0]<=14 and type2[0]<=12:
---
>                 operator = ''
>                 if type1[0] > 12 and type1[0] <= 14 and type2[0] <= 12:
1457c1422
<                     operator = p[2].children[0].leaf["label"][0] + "float"
---
>                     operator = p[2].children[0].leaf['label'][0] + 'float'
1459c1424
<                     operator = p[2].children[0].leaf["label"][0] + "float"
---
>                     operator = p[2].children[0].leaf['label'][0] + 'float'
1461,1472c1426,1432
<                     operator = p[2].children[0].leaf["label"][0] + "int"
<                             
< 
<                 p[0].leaf["code"] += ([[
<                                           operator,
<                                           p[1].children[ind].leaf["place"],
<                                           p[1].children[ind].leaf["place"],
<                                           p[4].children[ind].leaf["place"]
<                                       ]])
<                 p[0].leaf["place"] = None
< 
<         elif p[2].children[0].leaf["label"] == "+=":
---
>                     operator = p[2].children[0].leaf['label'][0] + 'int'
>                 p[0].leaf['code'] += [[ operator,
>                         p[1].children[ind].leaf['place'],
>                         p[1].children[ind].leaf['place'],
>                         p[4].children[ind].leaf['place']]]
>                 p[0].leaf['place'] = None
>         elif p[2].children[0].leaf['label'] == '+=':
1474,1478c1434,1435
<                 type1 = first_nontypedef(p[1].children[ind].leaf["type"],
<                                          cur_symtab[-1])
<                 type2 = first_nontypedef(p[4].children[ind].leaf["type"],
<                                          cur_symtab[-1])
< 
---
>                 type1 = first_nontypedef(p[1].children[ind].leaf['type'], cur_symtab[-1])
>                 type2 = first_nontypedef(p[4].children[ind].leaf['type'], cur_symtab[-1])
1480,1481c1437
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Arithmetic operation not allowed for given type')
---
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1483,1486c1439,1440
<                 elif (type1[0] >= 3 and type1[0] <= 12) and (type2[0] >= 13 and
<                                                              type2[0] <= 14):
<                     print("[line:" + str(p.lineno(1)) + "]" +
<                           'Not possible to assign float to int')
---
>                 elif type1[0] >= 3 and type1[0] <= 12 and type2[0] >= 13 and type2[0] <= 14:
>                     print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1489,1493c1443,1444
<                     if not ((type1[0] >= 3 and type1[0] <= 14) and
<                             (type2[0] >= 3 and type2[0] <= 14)):
<                         print(
<                             "[line:" + str(p.lineno(1)) + "]" +
<                             'Arithmetic operation not allowed for given type')
---
>                     if not (type1[0] >= 3 and type1[0] <= 14 and type2[0] >= 3 and type2[0] <= 14):
>                         print('[line:' + str(p.lineno(1)) + ']' + 'Arithmetic operation not allowed for given type')
1495d1445
< 
1498,1499c1448,1449
<                 operator = ""
<                 if type1[0]>12 and type1[0]<=14 and type2[0]<=12:
---
>                 operator = ''
>                 if type1[0] > 12 and type1[0] <= 14 and type2[0] <= 12:
1502,1504c1452,1454
<                     operator = p[2].children[0].leaf["label"][0] + "float"
<                 elif type1[0]>=12 and type1[0]<=14:
<                     operator = p[2].children[0].leaf["label"][0] + "float"
---
>                     operator = p[2].children[0].leaf['label'][0] + 'float'
>                 elif type1[0] >= 12 and type1[0] <= 14:
>                     operator = p[2].children[0].leaf['label'][0] + 'float'
1506c1456
<                     operator = p[2].children[0].leaf["label"][0] + "string"
---
>                     operator = p[2].children[0].leaf['label'][0] + 'string'
1508,1519c1458,1464
<                     operator = p[2].children[0].leaf["label"][0] + "int"
<                             
< 
<                 
<                 p[0].leaf["code"] += ([[
<                                           operator,
<                                           p[1].children[ind].leaf["place"],
<                                           p[1].children[ind].leaf["place"],
<                                           p[4].children[ind].leaf["place"]
<                                       ]])
<                 p[0].leaf["place"] = None
< 
---
>                     operator = p[2].children[0].leaf['label'][0] + 'int'
>                 p[0].leaf['code'] += [[
>                         operator,
>                         p[1].children[ind].leaf['place'],
>                         p[1].children[ind].leaf['place'],
>                         p[4].children[ind].leaf['place']]]
>                 p[0].leaf['place'] = None
1521c1466
<             print "ERROR NOT POSSIBLE IN ASSIGNMENT CASE"
---
>             print 'ERROR NOT POSSIBLE IN ASSIGNMENT CASE'
1536c1481
<         tmp_new = address_generate_compilername(cur_symtab[-1], cur_offset[-1])
---
>         tmp_new = address_generate_compilername(cur_offset[-1], p[4].children[0].leaf["type"], p[4].children[0].leaf["width"], func_offset[-1])
1542c1487
<         addr_3ac_offset[tmp_new].append(p[4].children[0].leaf["width"])
---
>         # addr_3ac_offset[tmp_new].append(p[4].children[0].leaf["width"])
1543a1489
>         func_offset[-1] += p[4].children[0].leaf["width"]
1743c1689
<         
---
> 
2019c1965
<     
---
> 
2643,2644c2589,2591
<             v1 = address_generate_compilername(None, 0)
<             addr_3ac_offset[v1].append(p[0].children[0].leaf["width"])
---
>             v1 = address_generate_compilername(0, 0, p[0].children[0].leaf['width'], func_offset[-1])
>             # addr_3ac_offset[v1].append(p[0].children[0].leaf["width"])
>             func_offset[-1] += p[0].children[0].leaf['width']
2717,2722c2664,2669
<                 var2 = address_generate_compilername(None, 0)
<                 addr_3ac_offset[var2].append(cur_symtab[-1].struct_name_map[type_p[1]].total)
<                 
<                 var3 = address_generate_compilername(None, 0)
<                 addr_3ac_offset[var3].append(w)
<                 
---
>                 var2 = address_generate_compilername(0, 0, cur_symtab[-1].struct_name_map[type_p[1]].total, func_offset[-1])
>                 func_offset[-1] += cur_symtab[-1].struct_name_map[type_p[1]].total
>                 # addr_3ac_offset[var2].append(cur_symtab[-1].struct_name_map[type_p[1]].total)
>                 var3 = address_generate_compilername(0, 0, w, func_offset[-1])
>                 func_offset[-1] += w
>                 # addr_3ac_offset[var3].append(w)
2751,2752c2698,2700
<                 var3 = address_generate_compilername(None, 0)
<                 addr_3ac_offset[var3].append(p[0].children[0].leaf['width'])
---
>                 var3 = address_generate_compilername(0, 0, p[0].children[0].leaf['width'], func_offset[-1])
>                 func_offset[-1] += p[0].children[0].leaf['width']
>                 # addr_3ac_offset[var3].append(p[0].children[0].leaf['width'])
2982c2930
<     
---
> 
3000a2949
>     func_offset.pop()
3019a2969
>     func_offset.append(0)
3065,3066c3015,3017
<                 offset=cur_offset[len(cur_offset) - 1])
<             cur_offset[len(cur_offset) - 1] += p[2].leaf["width"]
---
>                 offset=cur_offset[-1])
>             cur_offset[-1] += p[2].leaf["width"]
>             func_offset[-1] += p[2].leaf["width"]
